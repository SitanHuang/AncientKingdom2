var AI = {
    think: function(civ, civName) {
        if (Math.random() < 0.8)
            this.tryResearch(civ);
        if (civ.money > 15) {
            if (civ.deposit < 0) {
                civ.money = civ.deposit;
                civ.deposit = 0;
            }
            if (civ.politic < 2) {
                this.tryBuild(civ, civName, civ.money / (Math.ceil(Math.random() * 3)), types.city, 45);
                this.tryBuild(civ, civName, civ.money / (Math.ceil(Math.random() * 3)), types.finance, 45);
            }
            if (civ.ii < 125)
                this.tryBuildLand(civ, civName, civ.money / (Math.floor(Math.random() * 9)));
            if (civ.war && (civ.ii < 300 || Math.random() < 0.5))
                for (var k in civ.war) {
                    if (civ.war.hasOwnProperty(k) && civ.war[k] > 1) {
                        while (civ.deposit > 150) {
                            civ.money += civ.deposit / 2;
                            civ.deposit -= civ.deposit / 2;
                        }
                        this.tryDefend(civ, civName, civ.money / 1.5);
                        civOrders.forEach((x) => {
                            if (isAtWar(civs[x], k) && !isAtWar(civ, x) && x != civName) {
                                if (!isPeace(civ, x)) promptForPact(civName, x);
                                if (Math.random() > 0.6 && civ.money > 100)
                                    giveMoneyTo(civName, x, civ.money / 3, k)
                            }
                        })
                        break;
                    }
                }
            if (!(civ.politic < 2 || civ.money < 50)) {
                this.tryDefend(civ, civName, civ.money / (Math.ceil(Math.random() * 2)));
                this.tryResearch(civ);
                this.tryBuild(civ, civName, civ.money / (Math.ceil(Math.random() * 5)), types.city, 45);
                this.tryBuild(civ, civName, civ.money / (Math.ceil(Math.random() * 20)), types.fort, 25);
                this.tryBuild(civ, civName, civ.money / (Math.ceil(Math.random() * 6)), types.city, 45);
                this.tryBuild(civ, civName, civ.money / (Math.ceil(Math.random() * 7)), types.city, 45);
                if (civ.happiness > 60)
                    this.tryBuild(civ, civName, civ.money / (Math.ceil(Math.random() * 6)), types.finance, 85);
                if (civ.ii < 100)
                    this.tryBuildLand(civ, civName, civ.money / (Math.floor(Math.random() * 9)));
                this.tryBuild(civ, civName, civ.money / (Math.ceil(Math.random() * 25)), types.gate, 25);
                this.tryDefend(civ, civName, civ.money / (Math.ceil(Math.random() * 2)));
                civ.deposit += civ.money / 2;
                civ.money -= civ.money / 2
            }
        } else {
            while (civ.deposit > 150) {
                civ.money += civ.deposit / 10;
                civ.deposit -= civ.deposit / 10;
            }
            this.tryDefend(civ, civName, civ.money);
        }
    },
    tryResearch: function(civ) {
        var m = 300 + civ.money / 2;
        var p = 10 + civ.politic / 2;

        if (civ.money > m && civ.politic > p) {
            research();
        }
    },
    tryDefend: function(civ, civName, maxMoney) {
        if (civ.ii / (data.length * data[0].length) > 0.5 && Math.random() < 0.9) {
            return;
        }
        if (civ.ii / (data.length * data[0].length) > 0.07 && Math.random() < 0.5) {
            return;
        }
        if (civ.politic < 1) {
            return;
        }
        var moneySpent = -10;
        var list = getAllUnits(civName);
        var moveVal = -1;
        for (var ii = 0; ii < list.length; ii++) {

            if (civ.politic < 1) {
                return;
            }

            var item = list[ii];
            var row = item.row;
            var col = item.col;
            var land = item.land;

            if (land.type.val) {
                if (land.type.val > 10)
                    moveVal = land.type.val;
                else {
                    moveVal += land.type.val;
                    land.type = types.land;
                }
                if (Math.random() < 0.1 || (Math.random() < 0.1 && land.type.val > 25))
                    land.type = types.land;
            }

            var neighbor = false;

            getNeighbors(row, col, function(l2, r, c) {
                if (l2) {
                    if (l2.color != civName && l2.type) {
                        let isAl = isAlliance(civ, l2.color);
                        if (isAl) return;
                        if (!isAtWar(civ, l2.color)) {
                            var civ2 = civs[l2.color];
                            var alliance = false;
                            if (((civ.income > civ2.income * 0.7 && civ.technology > civ2.technology + 1 && civ.income > 250 && civ.deposit > civ.income * 2) || civ.income > civ2.income) && civ.happiness >= 95 && Math.random() > 0.8) {
                                if (!declareWar(civName, l2.color))
                                    return;
                            } else if ((civ2.ii * 0.5 < civ.ii || civ2.income > civ.income) && Math.random() > 0.6)
                                alliance = true;
                              else if (civ.income * 0.5 > civ2.ii && civ.happiness < 60 && Math.random() > 0.8 && (!civ.war || Object.getOwnPropertyNames(civ.war).length <= 4))
                                alliance = true;
                            if (alliance) {
                                civ.AIprompted = civ.AIprompted || {};
                                if (!civ.AIprompted[l2.color] || Math.random() > 0.99) {
                                    if (Math.random() > 0.96) promptForAlliance(civName, l2.color);
                                    if (!isPeace(civ, l2.color)) promptForPact(civName, l2.color);
                                    civ.AIprompted[l2.color] = true;
                                }
                            }
                            return;
                        }
                        neighbor = true;
                        if (civ.politic < 1) {
                            return;
                        }
                        if (l2.type.defend == types.land.defend && Math.random() < 0.5 && moneySpent + 35 < maxMoney && land.type.defend != types.fort.defend) {
                            civ.money -= 35 * (civ.ii > 225 ? 1.5 : 1);
                            moneySpent += 35 * (civ.ii > 225 ? 1.5 : 1);
                            land.type = (civ.ii > 225 ? types.headquarter : types.fort);
                            return;
                        }
                        var m = l2.type.val ? l2.type.val + Math.round(Math.random() * 15) : l2.type.defend + Math.round(Math.random() * 15);
                        if (moveVal > m / 2) {
                            m = moveVal;
                            land.type = types.land;
                            moneySpent -= m + m / 2;
                            civ.money += m * 1.7;
                        }
                        if (Math.random() < 0.2)
                            moveVal = -1;
                        moneySpent += m * 2;
                        if (moneySpent > maxMoney) {
                            if (l2.type.defend == types.city.defend) {
                                moneySpent -= m * 2 - 2;
                                m = 1;
                            } else
                                return;
                        }
                        civ.money -= m * 2;
                        var result = move(civOrders[i], {
                            civ: civName,
                            type: {
                                val: m
                            }
                        }, [r, c], 'ai');
                        var val = result[0];
                        if (result[1] == 0 /* && (Math.random() < 0.45 || l2.type.defend == types.land.defend)*/
                        ) {
                            list.push({
                                row: r,
                                col: c,
                                land: data[r][c]
                            })
                        }

                        civ.politic -= 0.7;
                        civ.money -= val / 2;
                    }
                }
            })

            if (!neighbor && (land.type.defend == types.fort.defend || land.type.defend == types.headquarter.defend) && Math.random() < 0.2) {
                land.type = types.land;
            }
        }

    },
    tryBuild: function(civ, civName, maxMoney, type, price) {
        var moneySpent = price;
        iterateMathRandom(function(row, col) {
            if (Math.random() < 0.4)
                return;

            var land = data[row][col];

            if (moneySpent > maxMoney)
                return;

            if (land && (!land.color || (land.type && land.color == civName && land.type.defend != types.capital.defend && land.type.defend != types.finance.defend && land.type.defend != types.city.defend))) {
                if (land.type && land.color == civName && land.type.defend == types.fort.defend)
                    return;
                var bool = false;
                var built = false;
                var capital = false;
                var neighbor = false;
                getNeighbors(row, col, function(l2, r, c) {
                    getNeighbors(r, c, function(l) {
                        if (Math.random() < 0.5)
                            return;
                        if (l && l.color != civName)
                            built = true;
                        if (l && l.type && l.type.defend == types.land.defend && Math.random() > 0.70)
                            built = built;
                        else if (l && l.type && l.type.defend != types.land.defend && l.type.defend != types.capital.defend && l.type.defend != types.finance.defend)
                            built = true;
                        if (l && l.type && l.type.defend == types.capital.defend)
                            capital = true;
                    });
                    if (l2 && l2.color == civName) {
                        bool = true;
                        if (l2.type && l2.type.defend != types.land.defend && l2.type.defend != types.capital.defend)
                            built = true;
                    } else if (l2 && l2.color != civName) {
                        neighbor = true;
                    }
                });
                if (neighbor && land.color == civName && type.defend == types.fort.defend && Math.random() > 0.6) {
                    data[row][col] = {
                        color: civName,
                        type: type
                    };
                    civ.money -= price;
                    moneySpent += price;
                } else if (bool && !built) {
                    data[row][col] = {
                        color: civName,
                        type: type
                    };
                    civ.money -= price;
                    moneySpent += price;
                }
            }
        });
    },
    tryBuildLand: function(civ, civName, maxMoney) {
        var moneySpent = 15;
        for (var row = 0; row < data.length; row++) {
            for (var col = 0; col < data[0].length; col++) {
                if (Math.random() < 0.9)
                    continue;

                var land = data[row][col];

                if (moneySpent > maxMoney)
                    return;

                if (land && !land.color) {
                    var bool = false;
                    getNeighbors(row, col, function(l2) {
                        if (l2 && l2.color == civName) {
                            bool = true;
                        }
                    });
                    if (bool) {
                        data[row][col] = {
                            color: civName,
                            type: types.land
                        };
                        getNeighbors(row, col, function(l, r, c) {
                            if (!l.color) {
                                data[r][c] = {
                                    color: civName,
                                    type: types.land
                                };
                            }
                        });
                        civ.money -= 15;
                        moneySpent += 15;
                    }
                }
            }
        }
    }
};
